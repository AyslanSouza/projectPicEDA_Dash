import pandas as pd
import streamlit as st
import plotly.express as px

# ConfiguraÃ§Ã£o do layout
st.set_page_config(layout="wide")

# Carregar os dados
arquivo = 'C:\\Users\\Citel\\Desktop\\Ayslan\\PIC_Dashboard\\dados_redcap_estruturados.xlsx'
planilhas = pd.read_excel(arquivo, sheet_name=None)

df_pacientes = planilhas['Pacientes']
df_diagnosticos = planilhas['DiagnÃ³sticos']

# ğŸ“Œ Sidebar para seleÃ§Ã£o de filtros
sexo = st.sidebar.selectbox("Selecione o sexo:", ["Todos", "masculino", "feminino"])
# âœ… Esse cÃ³digo cria um menu lateral (sidebar) onde o usuÃ¡rio pode escolher entre "Todos", "masculino" e "feminino".
# âœ… Isso permite filtrar os pacientes pelo gÃªnero antes de gerar o grÃ¡fico

df_pacientes_filtrado = df_pacientes.copy()

if sexo != "Todos":
    df_pacientes_filtrado = df_pacientes_filtrado[df_pacientes_filtrado["genero"] == sexo]
# âœ… Aqui, criamos uma cÃ³pia do dataframe df_pacientes para nÃ£o alterar os dados originais.
# âœ… Se o usuÃ¡rio nÃ£o escolheu "Todos", o cÃ³digo filtra apenas os pacientes do sexo selecionado.

df_sexo = df_pacientes_filtrado["genero"].value_counts().reset_index()
df_sexo.columns = ["Sexo", "Quantidade"]
fig_sexo = px.bar(df_sexo, x="Sexo", y="Quantidade", color="Sexo", title="DistribuiÃ§Ã£o de Pacientes por Sexo")
# âœ… Transformamos os dados filtrados em um formato adequado para o grÃ¡fico.
# âœ… value_counts() conta quantos pacientes hÃ¡ para cada categoria (masculino/feminino).
# âœ… reset_index() converte a contagem em um DataFrame para ser usado pelo grÃ¡fico.
# âœ… O grÃ¡fico gerado Ã© um grÃ¡fico de barras, onde cada barra representa um gÃªnero e sua quantidade.

st.plotly_chart(fig_sexo, use_container_width=True)
# âœ… Esse comando exibe o grÃ¡fico interativamente na aplicaÃ§Ã£o Streamlit.
# âœ… O parÃ¢metro use_container_width=True faz o grÃ¡fico se ajustar ao tamanho da tela.

#--------------------------------------------------------------------------#

# ğŸ“Œ Sidebar para seleÃ§Ã£o de faixa etÃ¡ria
idade = st.sidebar.selectbox("Selecione a faixa etÃ¡ria:", ["todos", "0-12 anos", "13-17 anos", "18-29 anos", "30-49 anos", "50+ anos"])

# ğŸ“Œ EstratificaÃ§Ã£o de pacientes com base na idade
df_idade_filtrado = df_pacientes.copy()

bins = [0, 12, 18, 30, 50, 100]
labels = ["0-12 anos", "13-17 anos", "18-29 anos", "30-49 anos", "50+ anos"]

# Criando a coluna faixa etÃ¡ria corretamente
df_idade_filtrado["faixa_etaria"] = pd.cut(df_idade_filtrado["idade"], bins=bins, labels=labels)

# ğŸ“Œ Aplicar filtragem APÃ“S a criaÃ§Ã£o da coluna
if idade != "todos":
    df_idade_filtrado = df_idade_filtrado[df_idade_filtrado["faixa_etaria"] == idade]

# ğŸ“Œ Contagem correta das faixas etÃ¡rias
df_faixa_etaria = df_idade_filtrado["faixa_etaria"].value_counts().reset_index()
df_faixa_etaria.columns = ["Faixa EtÃ¡ria", "Quantidade"]

# ğŸ“Œ Criar grÃ¡fico com dados corretos
fig_idade = px.bar(df_faixa_etaria, x="Faixa EtÃ¡ria", y="Quantidade", color="Faixa EtÃ¡ria", title="DistribuiÃ§Ã£o de Pacientes por Faixa EtÃ¡ria")

# ğŸ“Œ Exibir grÃ¡fico no Streamlit
st.plotly_chart(fig_idade, use_container_width=True)

#-------------------------------------------------------------------------#

import pandas as pd
import streamlit as st
import plotly.express as px

# ğŸ“Œ Criar cÃ³pia do dataframe para nÃ£o modificar o original
df_ORPHA = df_diagnosticos.copy()

# ğŸ“Œ Verificar nome correto da coluna ORPHA
coluna_orpha = "orpha_code" if "orpha_code" in df_ORPHA.columns else "ORPHA"
df_ORPHA[coluna_orpha] = df_ORPHA[coluna_orpha].astype(str)

# ğŸ“Œ Agrupar cÃ³digos ORPHA com menos de 100 ocorrÃªncias como "outros"
contagem_orpha = df_ORPHA[coluna_orpha].value_counts()
codigos_menos_100 = contagem_orpha[contagem_orpha < 100].index
df_ORPHA[coluna_orpha] = df_ORPHA[coluna_orpha].replace(codigos_menos_100, "outros")

# ğŸ“Œ Sidebar para seleÃ§Ã£o de cÃ³digo ORPHA
ORPHA = st.sidebar.selectbox("Selecione o cÃ³digo ORPHA:", ["Todos"] + df_ORPHA[coluna_orpha].unique().tolist())

# ğŸ“Œ Filtrar ORPHA corretamente apÃ³s a substituiÃ§Ã£o dos valores
if ORPHA != "Todos":
    df_ORPHA = df_ORPHA[df_ORPHA[coluna_orpha] == ORPHA]  # Filtragem correta

# ğŸ“Š Contagem correta dos cÃ³digos ORPHA, incluindo "outros"
df_ORPHA_cod = df_ORPHA[coluna_orpha].value_counts().reset_index()
df_ORPHA_cod.columns = ["CÃ³digo ORPHA", "Quantidade"]

# ğŸ“Œ Criar grÃ¡fico com dados corretos
fig_orpha = px.bar(df_ORPHA_cod, x="CÃ³digo ORPHA", y="Quantidade", color="CÃ³digo ORPHA", 
                   title="DistribuiÃ§Ã£o de Pacientes por CÃ³digo ORPHA")

# ğŸ“Œ Exibir grÃ¡fico no Streamlit
st.plotly_chart(fig_orpha, use_container_width=True)

